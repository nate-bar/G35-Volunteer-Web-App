import { Directive, EventEmitter, Input, Output } from '@angular/core';
import * as i0 from "@angular/core";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class MdbDropdownMenuDirective {
    elementRef;
    _renderer;
    constructor(elementRef, _renderer) {
        this.elementRef = elementRef;
        this._renderer = _renderer;
    }
    menuPositionClassChanged = new EventEmitter();
    get menuPositionClass() {
        return this._menuPositionClass;
    }
    set menuPositionClass(newClass) {
        const host = this.elementRef.nativeElement;
        const isSameClass = host.classList.contains(newClass);
        if (this._menuPositionClass !== newClass && !isSameClass) {
            const menuPositionClasses = [
                'dropdown-menu-start',
                'dropdown-menu-sm-start',
                'dropdown-menu-md-start',
                'dropdown-menu-lg-start',
                'dropdown-menu-xl-start',
                'dropdown-menu-xxl-start',
                'dropdown-menu-xxl-start',
                'dropdown-menu-xxl-start',
                'dropdown-menu-end',
                'dropdown-menu-sm-end',
                'dropdown-menu-md-end',
                'dropdown-menu-lg-end',
                'dropdown-menu-xl-end',
                'dropdown-menu-xxl-end',
                'dropdown-menu-xxl-end',
                'dropdown-menu-xxl-end',
            ];
            menuPositionClasses.forEach((className) => {
                this._renderer.removeClass(host, className);
            });
            this._renderer.addClass(host, newClass);
            this.menuPositionClassChanged.emit(this.menuPositionClass);
        }
    }
    _menuPositionClass;
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MdbDropdownMenuDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });
    static ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "17.0.7", type: MdbDropdownMenuDirective, selector: "[mdbDropdownMenu]", inputs: { menuPositionClass: "menuPositionClass" }, outputs: { menuPositionClassChanged: "menuPositionClassChanged" }, exportAs: ["mdbDropdownMenu"], ngImport: i0 });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MdbDropdownMenuDirective, decorators: [{
            type: Directive,
            args: [{
                    // eslint-disable-next-line @angular-eslint/directive-selector
                    selector: '[mdbDropdownMenu]',
                    exportAs: 'mdbDropdownMenu',
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.Renderer2 }], propDecorators: { menuPositionClassChanged: [{
                type: Output
            }], menuPositionClass: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJvcGRvd24tbWVudS5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9tZGItYW5ndWxhci11aS1raXQvZHJvcGRvd24vZHJvcGRvd24tbWVudS5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBYyxZQUFZLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBYSxNQUFNLGVBQWUsQ0FBQzs7QUFTOUYsa0VBQWtFO0FBQ2xFLE1BQU0sT0FBTyx3QkFBd0I7SUFDaEI7SUFBZ0M7SUFBbkQsWUFBbUIsVUFBc0IsRUFBVSxTQUFvQjtRQUFwRCxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQVUsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUFHLENBQUM7SUFDakUsd0JBQXdCLEdBQXlCLElBQUksWUFBWSxFQUFVLENBQUM7SUFFdEYsSUFDSSxpQkFBaUI7UUFDbkIsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUM7SUFDakMsQ0FBQztJQUVELElBQUksaUJBQWlCLENBQUMsUUFBZ0I7UUFDcEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUM7UUFDM0MsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdEQsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEtBQUssUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3hELE1BQU0sbUJBQW1CLEdBQUc7Z0JBQzFCLHFCQUFxQjtnQkFDckIsd0JBQXdCO2dCQUN4Qix3QkFBd0I7Z0JBQ3hCLHdCQUF3QjtnQkFDeEIsd0JBQXdCO2dCQUN4Qix5QkFBeUI7Z0JBQ3pCLHlCQUF5QjtnQkFDekIseUJBQXlCO2dCQUN6QixtQkFBbUI7Z0JBQ25CLHNCQUFzQjtnQkFDdEIsc0JBQXNCO2dCQUN0QixzQkFBc0I7Z0JBQ3RCLHNCQUFzQjtnQkFDdEIsdUJBQXVCO2dCQUN2Qix1QkFBdUI7Z0JBQ3ZCLHVCQUF1QjthQUN4QixDQUFDO1lBRUYsbUJBQW1CLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxFQUFFLEVBQUU7Z0JBQ3hDLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztZQUM5QyxDQUFDLENBQUMsQ0FBQztZQUNILElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxRQUFRLENBQUMsQ0FBQztZQUV4QyxJQUFJLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDO1NBQzVEO0lBQ0gsQ0FBQztJQUNPLGtCQUFrQixDQUFTO3VHQXhDeEIsd0JBQXdCOzJGQUF4Qix3QkFBd0I7OzJGQUF4Qix3QkFBd0I7a0JBTnBDLFNBQVM7bUJBQUM7b0JBQ1QsOERBQThEO29CQUM5RCxRQUFRLEVBQUUsbUJBQW1CO29CQUM3QixRQUFRLEVBQUUsaUJBQWlCO2lCQUM1Qjt1R0FJVyx3QkFBd0I7c0JBQWpDLE1BQU07Z0JBR0gsaUJBQWlCO3NCQURwQixLQUFLIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlLCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPdXRwdXQsIFJlbmRlcmVyMiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5leHBvcnQgdHlwZSBNZGJEcm9wZG93bk1lbnVQb3NpdGlvbkNsYXNzID0gJ2Ryb3Bkb3duLW1lbnUtZW5kJztcblxuQERpcmVjdGl2ZSh7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yXG4gIHNlbGVjdG9yOiAnW21kYkRyb3Bkb3duTWVudV0nLFxuICBleHBvcnRBczogJ21kYkRyb3Bkb3duTWVudScsXG59KVxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEBhbmd1bGFyLWVzbGludC9jb21wb25lbnQtY2xhc3Mtc3VmZml4XG5leHBvcnQgY2xhc3MgTWRiRHJvcGRvd25NZW51RGlyZWN0aXZlIHtcbiAgY29uc3RydWN0b3IocHVibGljIGVsZW1lbnRSZWY6IEVsZW1lbnRSZWYsIHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHt9XG4gIEBPdXRwdXQoKSBtZW51UG9zaXRpb25DbGFzc0NoYW5nZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cbiAgQElucHV0KClcbiAgZ2V0IG1lbnVQb3NpdGlvbkNsYXNzKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHRoaXMuX21lbnVQb3NpdGlvbkNsYXNzO1xuICB9XG5cbiAgc2V0IG1lbnVQb3NpdGlvbkNsYXNzKG5ld0NsYXNzOiBzdHJpbmcpIHtcbiAgICBjb25zdCBob3N0ID0gdGhpcy5lbGVtZW50UmVmLm5hdGl2ZUVsZW1lbnQ7XG4gICAgY29uc3QgaXNTYW1lQ2xhc3MgPSBob3N0LmNsYXNzTGlzdC5jb250YWlucyhuZXdDbGFzcyk7XG4gICAgaWYgKHRoaXMuX21lbnVQb3NpdGlvbkNsYXNzICE9PSBuZXdDbGFzcyAmJiAhaXNTYW1lQ2xhc3MpIHtcbiAgICAgIGNvbnN0IG1lbnVQb3NpdGlvbkNsYXNzZXMgPSBbXG4gICAgICAgICdkcm9wZG93bi1tZW51LXN0YXJ0JyxcbiAgICAgICAgJ2Ryb3Bkb3duLW1lbnUtc20tc3RhcnQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS1tZC1zdGFydCcsXG4gICAgICAgICdkcm9wZG93bi1tZW51LWxnLXN0YXJ0JyxcbiAgICAgICAgJ2Ryb3Bkb3duLW1lbnUteGwtc3RhcnQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS14eGwtc3RhcnQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS14eGwtc3RhcnQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS14eGwtc3RhcnQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS1lbmQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS1zbS1lbmQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS1tZC1lbmQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS1sZy1lbmQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS14bC1lbmQnLFxuICAgICAgICAnZHJvcGRvd24tbWVudS14eGwtZW5kJyxcbiAgICAgICAgJ2Ryb3Bkb3duLW1lbnUteHhsLWVuZCcsXG4gICAgICAgICdkcm9wZG93bi1tZW51LXh4bC1lbmQnLFxuICAgICAgXTtcblxuICAgICAgbWVudVBvc2l0aW9uQ2xhc3Nlcy5mb3JFYWNoKChjbGFzc05hbWUpID0+IHtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2xhc3MoaG9zdCwgY2xhc3NOYW1lKTtcbiAgICAgIH0pO1xuICAgICAgdGhpcy5fcmVuZGVyZXIuYWRkQ2xhc3MoaG9zdCwgbmV3Q2xhc3MpO1xuXG4gICAgICB0aGlzLm1lbnVQb3NpdGlvbkNsYXNzQ2hhbmdlZC5lbWl0KHRoaXMubWVudVBvc2l0aW9uQ2xhc3MpO1xuICAgIH1cbiAgfVxuICBwcml2YXRlIF9tZW51UG9zaXRpb25DbGFzczogc3RyaW5nO1xufVxuIl19