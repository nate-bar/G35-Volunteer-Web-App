import { Component, ContentChildren, EventEmitter, Inject, Input, Output, PLATFORM_ID, } from '@angular/core';
import { MdbScrollspyLinkDirective } from './scrollspy-link.directive';
import { distinctUntilChanged, takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { coerceBooleanProperty } from '@angular/cdk/coercion';
import { isPlatformBrowser } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./scrollspy.service";
// eslint-disable-next-line @angular-eslint/component-class-suffix
export class MdbScrollspyDirective {
    scrollSpyService;
    _elementRef;
    _renderer;
    links;
    _destroy$ = new Subject();
    get id() {
        return this._id;
    }
    set id(newId) {
        if (newId) {
            this._id = newId;
        }
    }
    _id;
    get collapsible() {
        return this._collapsible;
    }
    set collapsible(value) {
        this._collapsible = coerceBooleanProperty(value);
    }
    _collapsible = false;
    _isBrowser;
    activeLinkChange = new EventEmitter();
    activeSub;
    constructor(scrollSpyService, _elementRef, _renderer, platformId) {
        this.scrollSpyService = scrollSpyService;
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._isBrowser = isPlatformBrowser(platformId);
    }
    get host() {
        return this._elementRef.nativeElement;
    }
    collapsibleElementHeight = 0;
    ngOnInit() {
        if (this._isBrowser) {
            this.collapsibleElementHeight = this.host.getBoundingClientRect().height;
        }
        this.activeSub = this.scrollSpyService.active$
            .pipe(takeUntil(this._destroy$), distinctUntilChanged())
            .subscribe((activeLink) => {
            this.activeLinkChange.emit(activeLink);
            if (this.collapsible) {
                this.styleCollapsibleElement();
            }
        });
    }
    ngAfterContentInit() {
        this.scrollSpyService.addScrollspy({ id: this.id, links: this.links });
    }
    ngOnDestroy() {
        this.scrollSpyService.removeScrollspy(this.id);
        this._destroy$.next();
        this._destroy$.complete();
    }
    styleCollapsibleElement() {
        this._renderer.setStyle(this.host, 'overflow', 'hidden');
        this._renderer.setStyle(this.host, 'transition', 'height 0.2s ease-in-out');
        this._renderer.setStyle(this.host, 'flex-wrap', 'nowrap');
        const hostSiblings = this.getAllSiblings(this.host);
        const isAnySiblingActive = hostSiblings.some((element) => {
            return element.classList.contains('active');
        });
        if (this.collapsible && isAnySiblingActive) {
            this._renderer.setStyle(this.host, 'height', `${this.collapsibleElementHeight}px`);
        }
        else if (this.collapsible && !isAnySiblingActive) {
            this._renderer.setStyle(this.host, 'height', '0px');
        }
    }
    getAllSiblings(element) {
        let siblings = [];
        if (!element.parentNode) {
            return siblings;
        }
        let sibling = element.parentNode.firstElementChild;
        do {
            if (sibling != element) {
                siblings.push(sibling);
            }
        } while ((sibling = sibling.nextElementSibling));
        return siblings;
    }
    static ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MdbScrollspyDirective, deps: [{ token: i1.MdbScrollspyService }, { token: i0.ElementRef }, { token: i0.Renderer2 }, { token: PLATFORM_ID }], target: i0.ɵɵFactoryTarget.Component });
    static ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "17.0.7", type: MdbScrollspyDirective, selector: "[mdbScrollspy]", inputs: { id: ["mdbScrollspy", "id"], collapsible: "collapsible" }, outputs: { activeLinkChange: "activeLinkChange" }, queries: [{ propertyName: "links", predicate: MdbScrollspyLinkDirective, descendants: true }], ngImport: i0, template: '<ng-content></ng-content>', isInline: true });
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.7", ngImport: i0, type: MdbScrollspyDirective, decorators: [{
            type: Component,
            args: [{
                    // eslint-disable-next-line @angular-eslint/component-selector
                    selector: '[mdbScrollspy]',
                    template: '<ng-content></ng-content>',
                }]
        }], ctorParameters: () => [{ type: i1.MdbScrollspyService }, { type: i0.ElementRef }, { type: i0.Renderer2 }, { type: Object, decorators: [{
                    type: Inject,
                    args: [PLATFORM_ID]
                }] }], propDecorators: { links: [{
                type: ContentChildren,
                args: [MdbScrollspyLinkDirective, { descendants: true }]
            }], id: [{
                type: Input,
                args: ['mdbScrollspy']
            }], collapsible: [{
                type: Input
            }], activeLinkChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,